function setBackgroundInput(element) {
    background          = '';
    background_parallax = '';
    wrapper             = element;
    bgColor1            = wrapper.find('.acf-section-styles-background-color_1').val();
    bgColor2            = wrapper.find('.acf-section-styles-background-color_2').val();
    gradStyle           = wrapper.find('.acf-section-styles-gradient-style').val();
    gradDirection       = wrapper.find('.acf-section-styles-gradient-direction').val();
    bgImage             = wrapper.find('.acf-section-styles-background-image-preview-container img').attr('src');
    bgSize              = wrapper.find('.image-size').val();
    bgStyle             = wrapper.find('.image-style').val();
    bgRepeat            = wrapper.find('.image-repeat').val();
    bgPosVert           = wrapper.find('.background-pos-vert').val();
    bgPosHor            = wrapper.find('.background-pos-hor').val();
    bgImageLayer        = wrapper.find('.image-layer').val();
    bgActual            = wrapper.find('.background-actual');
    bgParallax          = wrapper.find('.background-parallax');
    bgSample            = wrapper.find('.background-sample');

    if (!bgColor1 && !bgColor2)  {
        if (bgImage) {
            if (bgStyle == 'parallax') {
                background += 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = '';
            }
            else {
                if (bgRepeat == 'no-repeat') {
                    background += 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
                }
                else {
                    background += 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
                }
                
            }
        }
        bgParallax.val(background_parallax);
        bgActual.val(background);
        bgSample.css('background',background);
    }
    if (bgColor1 && !bgColor2)  {
        gradient = 'linear-gradient('+gradDirection+','+bgColor1+','+bgColor1+')';
       
        if ( bgImage && bgImageLayer == 'below' ) {
            console.log('image below')
            if (bgRepeat == 'no-repeat') {
                background_image = 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
            }
            else {
                background_image = 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
            }
            if (bgStyle == 'parallax') {
                background_image = 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = gradient;
            }

            background = gradient+','+background_image;
        } 
        if ( bgImage && bgImageLayer == 'above' ) {
            console.log('image below')
            if (bgRepeat == 'no-repeat') {
                background_image = 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
            }
            else {
                background_image = 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
            }
            if (bgStyle == 'parallax') {
                background_image = 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = gradient;
            }
            background = background_image+','+gradient;
        } 

        if (!bgImage) {
            background = gradient;
        }
        bgParallax.val(background_parallax);
        bgActual.val(background);
        bgSample.css('background',background);
        
    }
    if (!bgColor1 && bgColor2)  {
        gradient = 'linear-gradient('+gradDirection+','+bgColor2+','+bgColor2+')';
       
        if ( bgImage && bgImageLayer == 'below' ) {
            console.log('image below')
            if (bgRepeat == 'no-repeat') {
                background_image = 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
            }
            else {
                background_image = 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
            }
            if (bgStyle == 'parallax') {
                background_image = 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = gradient;
            }

            background = gradient+','+background_image;
        } 
        if ( bgImage && bgImageLayer == 'above' ) {
            console.log('image below')
            if (bgRepeat == 'no-repeat') {
                background_image = 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
            }
            else {
                background_image = 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
            }
            if (bgStyle == 'parallax') {
                background_image = 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = gradient;
            }
            background = background_image+','+gradient;
        } 

        if (!bgImage) {
            background = gradient;
        }
        bgParallax.val(background_parallax);
        bgActual.val(background);
        bgSample.css('background',background);
        
    }

    if (bgColor1 && bgColor2)  {
        gradient = 'linear-gradient('+gradDirection+','+bgColor1+','+bgColor2+')';
       
        if ( bgImage && bgImageLayer == 'below' ) {
            console.log('image below')
            if (bgRepeat == 'no-repeat') {
                background_image = 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
            }
            else {
                background_image = 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
            }
            if (bgStyle == 'parallax') {
                background_image = 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = gradient;
            }

            background = gradient+','+background_image;
        } 
        if ( bgImage && bgImageLayer == 'above' ) {
            console.log('image below')
            if (bgRepeat == 'no-repeat') {
                background_image = 'url('+bgImage+')'+bgPosVert+' '+bgPosHor+'/'+bgSize+' '+bgRepeat+' '+bgStyle;
            }
            else {
                background_image = 'url('+bgImage+')'+bgRepeat+' '+bgStyle;
            }
            if (bgStyle == 'parallax') {
                background_image = 'url('+bgImage+') center center / cover no-repeat scroll';
                background_parallax = gradient;
            }
            background = background_image+','+gradient;
        } 

        if (!bgImage) {
            background = gradient;
        }
        bgParallax.val(background_parallax);
        bgActual.val(background);
        bgSample.css('background',background);
        
    }
}
//Colours / Gradient
jQuery('#poststuff').on('input', '.acf-section-styles-gradient-style',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});
jQuery('#poststuff').on('input', '.acf-section-styles-gradient-direction',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});

//Image
jQuery('#poststuff').on('input', '.image-size',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});
jQuery('#poststuff').on('input', '.image-style',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});
jQuery('#poststuff').on('input', '.image-repeat',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});
jQuery('#poststuff').on('input', '.background-pos-vert',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});
jQuery('#poststuff').on('input', '.background-pos-hor',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});
jQuery('#poststuff').on('input', '.image-layer',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});

//Clear Colours
jQuery('#poststuff').on('mouseup', '.wp-picker-clear',function() {
    picker = jQuery(this).closest('.acf-pb-background');
    setBackgroundInput(picker)
});

// background image select
jQuery('#poststuff').on('click', '.acf-section-styles-background-image-select', function( event ) {
    console.log('IMAGE-SELECT');
    event.preventDefault();

    var el = jQuery(this);

    var backgroundImageContainerEl = el.parents('.acf-section-styles-background-image-container'),
            backgroundImageInput = jQuery('.acf-section-styles-background-image-input', backgroundImageContainerEl),
            backgroundImagePreview = jQuery('.acf-section-styles-background-image-preview', backgroundImageContainerEl);

    file_frame = wp.media.frames.file_frame = wp.media({
        title: acf._e( 'section_styles', 'file_select_title' ),
        button: {
            text: acf._e( 'section_styles', 'file_select_text' )
        },
        library: { type : 'image' },
        multiple: false
    });

    file_frame.on( 'select', function() {
        attachment = file_frame.state().get('selection').first().toJSON();
        backgroundImageInput.val(attachment.id);
        backgroundImageContainerEl.addClass('has-value');
        backgroundImagePreview.attr('src', attachment.url);
        picker = el.closest('.acf-pb-background');
        setBackgroundInput(picker)
    });
    // Finally, open the modal
    file_frame.open();

});

// remove background image
jQuery('#poststuff').on('click', '.acf-section-styles-background-image-remove', function( event ) {
    console.log('IMAGE-remove');
    var el = jQuery(this);

    event.preventDefault();

    var     backgroundImageContainerEl = jQuery(this).parents('.acf-section-styles-background-image-container'),
            backgroundImageInput = jQuery('.acf-section-styles-background-image-input', backgroundImageContainerEl);
            backgroundImagePreview = jQuery('.acf-section-styles-background-image-preview', backgroundImageContainerEl);

    backgroundImageInput.val('');
    backgroundImagePreview.removeAttr('src');
    backgroundImageContainerEl.removeClass('has-value');
    picker = el.closest('.acf-pb-background');
    setBackgroundInput(picker)

});
function setTypoInput(element) {
	wrapper 		= element.parents('.typography-wrapper');
	selector 		= element.data("preview");
	selector 		= '.'+element.data("preview");
	style 			= element.data("style");
	value 			= element.val();
	previewElement 	= wrapper.find(selector);
	previewElement.css(style,value);
}

function addPx(element) {
    currentVal = element.val();
    if ( element.val().slice(-2) !== 'px' ) {
    	newVal = (currentVal + 'px');
        element.val( newVal ) ;
        setTypoInput(element);
    }
}

function addPxShadow(element) {
    currentVal = element.val();
    if ( element.val().slice(-2) !== 'px' ) {
    	newVal = (currentVal + 'px');
        element.val( newVal );
    }
    if ( element.val().slice(1) == 'p' ) {
    	newVal = ('0'+'px');
        element.val( newVal );
    }
}

function setShadow(element) {
	group 			= element.parents('.row');
	wrapper 		= element.parents('.typography-wrapper');
	hValue 			= group.find('.acf-section-styles-text-shadow-h').val();
	vValue 			= group.find('.acf-section-styles-text-shadow-v').val();
	bValue 			= group.find('.acf-section-styles-text-shadow-blur').val();
	cValue 			= group.find('.acf-section-styles-text-shadow-color').val();
	actualValue 	= group.find('.acf-section-styles-text-shadow-actual');
	selector 		= element.data("preview");
	selector 		= '.'+element.data("preview");
	value 			= hValue+' '+vValue+' '+bValue+' '+cValue;
	previewElement 	= wrapper.find(selector);
	previewElement.css(style,value);
	actualValue.val(value);
}

function removeStyle(style){
    var search = new RegExp(style + '[^;]+;?', 'g');
    return this.each(function(){
        $(this).attr('style', function(i, style){
            return style.replace(search, '');
        });
    });
}

(function($){
	
	//Modals for Appearance, Responsive Options & Typography
	
	
	if( typeof acf.add_action !== 'undefined' ) {
	
		/*
		*  ready append (ACF5)
		*
		*  These are 2 events which are fired during the page load
		*  ready = on page load similar to $(document).ready()
		*  append = on new DOM elements appended via repeater field
		*
		*  @type	event
		*  @date	20/07/13
		*
		*  @param	$el (jQuery selection) the jQuery element which contains the ACF fields
		*  @return	n/a
		*/
		
		acf.add_action('ready append', function( $el ){
			popTriggers = $('.acf-pb-options-modal-triggers a');
$(popTriggers).click(function(e) {
	e.preventDefault();
	popUp = $(this).attr('href');
	currentPop = $(this).closest('.acf-field').find(popUp);
	parentColumn = $(this).closest('.pb-column');
	$(currentPop).addClass('modal-active');
	if ( !$(this).closest('.acf-pb-options-modal-triggers').find('.option-modal-underlay').hasClass('modal-active') ) {
		$(this).closest('.acf-pb-options-modal-triggers').find('.option-modal-underlay').addClass('modal-active');
	}
	if ( !$('body').hasClass('modal-active') ) {
		$('body').addClass('modal-active');
	}
	if ( !$(parentColumn).hasClass('child-modal-active') ) {
		$(parentColumn).addClass('child-modal-active');
	}
	sectionStyles = $(this).closest('.acf-pb-options-modal-triggers').next('.acf-section-styles-container');

	sectionStyles.find('.acf-type-input' ).each(function() {
        picker = $(this);
        setTypoInput(picker);
    });
	
	sectionStyles.find('.acf-section-styles-border-color').wpColorPicker();
	
	sectionStyles.find('.bm-pb-typo-color.acf-section-styles-text-shadow-color').wpColorPicker({
		palettes: $palettes,
		change: function(event, ui) {
			
		    picker = $(this);
		    setShadow(picker)
		}
	});
	sectionStyles.find('.bm-pb-typo-color').wpColorPicker({
	    palettes: $palettes,
	    change: function(event, ui) {
	    	
	        picker = $(this);
	        setTypoInput(picker)
	    }
	});

	sectionStyles.find('.acf-section-styles-background-color_1').wpColorPicker({
	    palettes: $palettes,
	    change: function(event, ui) {
	    	
	        picker = $(this).closest('.acf-pb-background');
    		setBackgroundInput(picker)
	    }
	});

	sectionStyles.find('.acf-section-styles-background-color_2').wpColorPicker({
	    palettes: $palettes,
	    change: function(event, ui) {
	    	
	        picker = $(this).closest('.acf-pb-background');
    		setBackgroundInput(picker)
	    }
	});

	$bg_section = sectionStyles.find('.acf-pb-background');
	setBackgroundInput($bg_section);

});
$('.tb-close-icon').click(function(e){
	$(this).closest('.acf-pb-options-modal').removeClass('modal-active');
	$('.option-modal-underlay').removeClass('modal-active');
	activeModal = $('#poststuff').find('.modal-active');
	parentColumn = $(this).closest('.pb-column');
	$(parentColumn).removeClass('child-modal-active');
	if ( ! $('#poststuff').find('.column-modal-open').length ) {
		$('.option-modal-underlay').removeClass('modal-active');
		$('body').removeClass('modal-active');
	}
});

            $('.acf-pb-tabs').tabslet({
                animation: true
            });

            //Typography
            $('#poststuff').on('change', '.values .acf-type-input',function() {
                picker = $(this);
                setTypoInput(picker);
            });
            $( "#poststuff .acf-type-input" ).each(function() {
                picker = $(this);
                setTypoInput(picker);
            });
            $('#poststuff').on('change', '.values .font-size',function() {
                element = $(this);
                addPx(element);
            });
            $( "#poststuff .values .font-size" ).each(function() {
                element = $(this);
                addPx(element);
            });

            $('#poststuff').on('change', '.values .text-shadow input.px-value',function() {
                element = $(this);
                addPxShadow(element);
                setShadow(element)
            });
            $( "#poststuff .values .text-shadow input.px-value" ).each(function() {
                element = $(this);
                addPxShadow(element);
                setShadow(element);
            });
        
            $('#poststuff').on('click', '.values .typo-full-reset',function() {
                element = $(this);
                wrapper = element.parents('.typography-wrapper');
                inputs  = wrapper.find('input');
                selects = wrapper.find('select')
                inputs.each(function(){
                    defaultVal = $(this).data('default');
                    $(this).val(defaultVal).change();
                })
                selects.each(function(){
                    defaultVal = $(this).data('default');
                    $(this).find('option[value="' + defaultVal + '"]').prop('selected', true).change();
                })
            });

        });
		
	} 

})(jQuery);

jQuery(document).ready(function($){
    
    //Add Modal Unerlay used for column and layout modal.
$('#wpwrap').append('<div class="pb-modal-underlay"></div>');

//Function to split fields into columns.
$.fn.chunk = function(size) {
    var arr = [];
    for (var i = 0; i < this.length; i += size) {
        arr.push(this.slice(i, i + size));
    }
    return this.pushStack(arr, "chunk", size);
}
//Split clones.
$('#page-builder > .acf-input > .acf-flexible-content > .clones > .layout > .acf-fields > .acf-field').not('[data-name="section_styles"]').chunk(2).wrap( '<div class="pb-column"><div class="pb-column-inner"></div></div>' );

//Split existing fields.
$('#page-builder > .acf-input > .acf-flexible-content > .values > .layout > .acf-fields > .acf-field').not('[data-name="section_styles"]').chunk(2).wrap( '<div class="pb-column"><div class="pb-column-inner"></div></div>' );

//Select cols to wrap
columnsToWrap   = $('.pb-column');

//Wrap them
$(columnsToWrap).each(function () {
    //Get saved/default col sizes
    colSize = $(this).find('.acf-responsive-options-desk-size-container > select option:selected');
    //Wrap them
    $(this).wrap( '<div class="col-desk-'+$(colSize).text()+'"></div>' );
});

//Define header and footer
header          = '<div class="pb-modal-header"><div class="modal-close"><span class="screen-reader-text">Close</span><span class="tb-close-icon"></span></div></div></div>'
footer          = '<div class="pb-modal-footer"><div class="pb-modal-button"><a class="acf-button button button-primary prev-column" href="#">Prev Column</a></div><div class="pb-modal-button"><a class="acf-button button button-primary next-column" href="#">Next Column</a></div></div>'

//Add header and footer to all columns
$('.pb-column').prepend(header);
$('.pb-column').append(footer);

//Add Column Number
colsParent = $('.acf-fields [class^="col-desk-"]').parent();
$(colsParent).each(function(index,obj) {
    cols = $(obj).find('.pb-column .pb-modal-header');
    $(cols).each(function(index){
        colNumber = index+1
        $(this).prepend('<div class="cols-number">Column '+colNumber+'</div>');
    })
});
colInner = $('.pb-column');

//Collapse all FC Layouts
$('[data-name$="elements_elements"] > .acf-input > .acf-flexible-content > .values > .layout').addClass('-collapsed');

//Add the "Edit Column" button to all cols.
$('[data-name$="elements_elements"]').append('<div class="pb-modal-button"><a class="acf-button button button-primary pb-edit-button" href="#"">Edit Column</a></div>');

//Function to close Column Modal
function closeColumnModal() {
    $('.pb-column').removeClass('column-modal-open');
    $('body').removeClass('modal-active');
    $('.pb-modal-underlay').removeClass('modal-active');
    $('.pb-column').find('[data-name$="elements_elements"] .values .layout').addClass('-collapsed');
}

//Function to initiate Column Modal
function initColumnModal() {
    //CLose any existing column modals
    closeColumnModal();
    //Display column in modal
    $('.pb-modal-underlay').addClass('modal-active');
    $('body').addClass('modal-active');
    $(currentColumn).addClass('column-modal-open');
    $(currentColumn).css('opacity','0');
    $(currentColumn).animate({
        opacity: 1
      }, 400, function() {
        // Animation complete.
    });

    //Un-collapse the FC Layputs
    //$(currentColumn).find('[data-name$="elements_elements"] > .acf-input > .acf-flexible-content > .values > .layout').removeClass('-collapsed');
    
    //Show/hide prev/next button as required.
    if ( ! $(currentColumn).closest('[class^="col-desk"]').prev('[class^="col-desk"]').length) {
        $(currentColumn).find('.prev-column').hide();
    }; 
    if ( ! $(currentColumn).closest('[class^="col-desk"]').next('[class^="col-desk"]').length) {
        $(currentColumn).find('.next-column').hide();
    }; 
}

//Fire Colum Modal
$('#poststuff').on('click','.pb-edit-button', function(e){
    //Vars
    currentColumn       = $(this).closest('.pb-column');
    initColumnModal();
});

//Prev/Next
$('#poststuff').on('click','.prev-column', function(e){
    //Vars
    activeColumn            = $(this).closest('.pb-column');
    activeColWrapper        = $(activeColumn).closest('[class^="col-desk"]');
    currentColumn           = $(activeColWrapper).prev().find('.pb-column');
    initColumnModal();
});
$('#poststuff').on('click','.next-column', function(e){
    //Vars
    activeColumn            = $(this).closest('.pb-column');
    activeColWrapper        = $(activeColumn).closest('[class^="col-desk"]');
    currentColumn           = $(activeColWrapper).next().find('.pb-column');
    initColumnModal();
});

//Close Modal
$('#poststuff').on('click','.column-modal-open .pb-modal-header>.modal-close .tb-close-icon', function(e){
    closeColumnModal();
});

//Helper function to set the columns for large screen meta.
function largeColSet() {
    $('[data-name$="options_size_on_large_screens"]').each(function(){
        $(this).find('.acf-input').hide();
        largeColSize = $(this).find('.acf-input select option:selected').text();
        $(this).append('<span><strong><span class="col-size">'+largeColSize+'</span> Columns</strong></span>');
    });
}
largeColSet();

//Helper function to set the columns for large screen meta when columns are dragged.
function largeColUpdate() {
    $('[data-name$="options_size_on_large_screens"]').each(function(){
        $(this).find('.acf-input').hide();
        largeColSize = $(this).find('.acf-input select option:selected').text();
        $(this).find('.col-size').text(largeColSize);
    });
}
//Do the dragging and class changing.
$('#poststuff').on('mouseenter','[data-layout^="page_builder_columns"] > .acf-fields', function(e){
    var setrow = $(this);
    setrow.children('[class^="col-desk-"]').not(':first').prepend('<div class="column-merge"></div>');
    var single = setrow.parent().width()/12-1;
    setrow.children('[class^="col-desk-"]').each(function(k,v){
        var column = $(v)
        var width = column.width()/2-5;
    });
    $( ".column-merge" ).draggable({
        axis: "x",
        helper: "clone",
        appendTo: setrow,
        grid: [single, 0],
        drag: function(e, ui){
            $(this).addClass('dragging');
            var column = $(this).parent(),
                dragged = ui.helper,
                direction = (ui.originalPosition.left > dragged.position().left) ? 'left' : 'right',
                step = 0,
                prev = column.prev(),
                single = Math.round(column.parent().width()/12-10),
                distance = Math.abs(ui.originalPosition.left - dragged.position().left);                
            column.parent().addClass('sizing');
            if(distance >= single){
                var left        = prev.attr('class').split('-'),
                    right       = column.attr('class').split('-');

                left[2]     = parseFloat(left[2]);
                right[2]    = parseFloat(right[2]);

                if(direction === 'left'){
                    left[2]--;
                    right[2]++;
                    if(left[2] > 0 && left[2] < (left[2]+right[2]) ){
                        prev.attr('class', left.join('-'));
                        column.attr('class', right.join('-'));
                        ui.originalPosition.left = dragged.position().left;
                    }else{
                        $(this).draggable( "option", "disabled", true );
                    }
                }else{
                    left[2]++;
                    right[2]--;
                    if(right[2] > 0 && right[2] < (right[2]+right[2]) ){
                        prev.attr('class', left.join('-'));
                        column.attr('class', right.join('-'));
                        ui.originalPosition.left = dragged.position().left;
                    }else{
                        $(this).draggable( "option", "disabled", true );
                    }

                }
            }
        },
        stop: function(){
            $(this).removeClass('dragging').parent().parent().removeClass('sizing');
            newClass = $(this).parent().attr('class');
            selectVal = newClass.replace(/\D/g,'');
            $(this).parent().find('.acf-responsive-options-desk-size-container > select').val(selectVal,selectVal);
            console.log('new class = '+newClass);
            console.log('select val = '+selectVal);
            newPrevClass = $(this).parent().prev().attr('class');
            newSelectVal = newPrevClass.replace(/\D/g,'');
            $(this).parent().prev().find('.acf-responsive-options-desk-size-container > select').val(newSelectVal,newSelectVal);
            console.log('new prev class = '+newPrevClass);
            console.log('prev select val = '+newSelectVal);
        }
    });
});

$('#poststuff').on('mouseleave','[data-layout^="page_builder_columns"] > .acf-fields', function(e){
    $('.column-merge').remove();
});

$('#poststuff').on('change', '.values .typo-default-switcher select',function() {
    console.log('clicked');
    options = $(this).parents('.acf-pb-section-inner').next('.acf-pb-section-inner').toggleClass('disabled');
});
$('#poststuff').on('input', '.pb-control-group input',function() {
    if ($(this).closest('ul.pb-control-group').hasClass('linked')) {
        $(this).closest('ul.pb-control-group').find('input').val(this.value);
    }
});

$('#poststuff').on('click', '.control-button', function() {
    $(this).toggleClass('linked');
    $(this).closest('ul.pb-control-group').toggleClass('linked');
});

    $('.acf-field-setting-display_options input[id$="display_options-all"]').on('change', function() {
        $(this).closest('.acf-checkbox-list').find('input[type="checkbox"]').not(this).prop('checked', true);  
    });
    $('.acf-field-setting-display_options .acf-checkbox-list input[type="checkbox"]').not('input[id$="display_options-all"]').on('change', function() {
        $(this).closest('.acf-checkbox-list').find('input[id$="display_options-all"]').prop('checked', false);  
    });    
});
